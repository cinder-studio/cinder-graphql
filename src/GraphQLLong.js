// // // // //
//
// Original Source @ https://www.npmjs.com/package/graphql-type-long
// Imported to avoid dependency abandonment from the original library
//
// ISC License
// Abandoned Library
//
// // // // //
//
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
// OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
// CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE
//
// // // // //

// Generated by CoffeeScript 1.10.0

var GraphQLLong, GraphQLScalarType, Kind, MAX_LONG, MIN_LONG, coerceLong, parseLiteral;

GraphQLScalarType = require('graphql').GraphQLScalarType;

Kind = require('graphql/language').Kind;

MAX_LONG = Number.MAX_SAFE_INTEGER;

MIN_LONG = Number.MIN_SAFE_INTEGER;

coerceLong = function(value) {
  var num;
  if (value === '') {
    throw new TypeError('Long cannot represent non 52-bit signed integer value: (empty string)');
  }
  num = Number(value);
  if (num === num && num <= MAX_LONG && num >= MIN_LONG) {
    if (num < 0) {
      return Math.ceil(num);
    } else {
      return Math.floor(num);
    }
  }
  throw new TypeError('Long cannot represent non 52-bit signed integer value: ' + String(value));
};

parseLiteral = function(ast) {
  var num;
  if (ast.kind === Kind.INT) {
    num = parseInt(ast.value, 10);
    if (num <= MAX_LONG && num >= MIN_LONG) {
      return num;
    }
    return null;
  }
};

GraphQLLong = new GraphQLScalarType({
  name: 'Long',
  description: 'The `Long` scalar type represents 52-bit integers',
  serialize: coerceLong,
  parseValue: coerceLong,
  parseLiteral: parseLiteral
});

module.exports = GraphQLLong;
